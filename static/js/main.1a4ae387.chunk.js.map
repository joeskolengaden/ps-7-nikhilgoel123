{"version":3,"sources":["burger.jpg","wandering.jpg","Homepage.js","Artists.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Homepage","react_default","a","createElement","Fragment","src","logo2","alt","Component","Artists","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","inherits","createClass","key","value","_this2","d3","then","d","setState","console","log","className","map","reactstrap_es","href","link","name","description","About","logo","class","App","HashRouter","Link","to","Route","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a4ae387.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/burger.21f85b68.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wandering.e61f303d.jpg\";","import React, {Component} from 'react';\nimport logo2 from './burger.jpg';\nclass Homepage extends Component {\n    render() {\n        return(\n            <React.Fragment>\n                <h2>Nikhil Goel</h2>\n                <div>Welcome to my website.</div>\n                <div>Here you can find some information about my year, major, interests and projects that I've worked on!</div>\n                <div>Navigate through the tabs to discover information about me.</div>\n                <img src={logo2} alt=\"Picture of in n out burger, a join I like\"></img>\n            </React.Fragment>\n        )\n    }\n}\n\nexport {Homepage};","import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport { Card, Button, CardBody, CardTitle, CardText, Col } from 'reactstrap';\n\nexport class Artists extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: []\n        }\n    }\n    componentDidMount() {\n        d3.csv(\"data/artists.csv\").then((d) => {\n            this.setState({ data: d });\n        });\n\n    }\n    render() {\n        console.log(this.state.data)\n        return <div className=\"container\">Artists\n                {this.state.data.map((d)=> {\n                    return (\n                    <Card>\n                        <CardBody>\n                            <CardTitle><a href={d.link}>{d.name}</a></CardTitle>\n                            <CardText>{d.description}</CardText>\n                        </CardBody>\n                    </Card>\n                    )\n                })}\n               </div> \n    }\n}\n\n","import React, { Component } from 'react';\nimport logo from './wandering.jpg';\nimport logo2 from './burger.jpg';\nimport './App.css';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {Homepage} from \"./Homepage\";\nimport {Artists} from \"./Artists\";\n\nclass App extends Component {\n  render() {\n      return (<div>\n                <Router>\n                    <React.Fragment>\n                        <Link to=\"/\">Home</Link>\n                        <Link to=\"/about\">About</Link>\n                        <Link to=\"/artists\">Artists</Link>\n                        <Route path=\"/about\" component={About}/>\n                        <Route exact path=\"/\" component={Homepage}/>\n                        <Route exact path=\"/artists\" component={Artists}/>\n                    </React.Fragment>\n                </Router>\n              </div>\n          );\n  }\n}\nfunction About() {\n  return (\n    <div> \n      <h1>Nikhil Goel</h1>\n      <img src={logo} alt=\"Picture of me for the about page\" class = \"center\"></img>\n      <React.Fragment>\n        <div class =\"center\">Hi, I'm currently a senior in Informatics!</div>\n        <div class =\"center\">I'm interested in Music, Basketball and Art</div>\n        <div class =\"center\">Some of my favorite artists are: Travis Scott, Young Thug, Juice Wrld</div>\n        <div class =\"center\">Some of my favorite ball players are: Kyrie Irving, Russel Westbrook, Brian Scalabrine</div>\n      </React.Fragment>\n    </div>\n  );\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}